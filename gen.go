//+build ignore

package main

import (
	"bytes"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"go/format"
	yaml "gopkg.in/yaml.v2"
	"io/ioutil"
	"log"
	"os"
	"path"
	"strings"
	"text/template"
)

const (
	datadir string = "_data"
	confdir string = "pkg/config"
)

var maptmpl = template.Must(template.New("Map").Parse(`
package config

// Code generated by go generate; DO NOT EDIT.
var {{ .Name }} = map[string]string{{ .Code }}`))

func writeMap(data map[string]string, name string) error {
	b, err := json.Marshal(data)
	if err != nil {
		return err
	}
	buffer := &bytes.Buffer{}
	err = maptmpl.Execute(buffer,
		struct {
			Name string
			Code string
		}{
			Name: strings.Title(name),
			Code: fmt.Sprintf("%s", b),
		})
	if err != nil {
		return err
	}
	src, err := format.Source(buffer.Bytes())
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(path.Join(confdir, name+".go"), src, 0644)
	return err
}

func generateCodes(filename string, ctype string) {
	type codemap struct {
		Name string `xml:"name"`
		Code string `xml:"code"`
	}
	file, err := os.Open(path.Join(datadir, filename))
	if err != nil {
		log.Fatal(err)
	}
	decoder := xml.NewDecoder(file)
	codes := make(map[string]string)

	for {
		t, _ := decoder.Token()
		if t == nil {
			break
		}
		switch se := t.(type) {
		case xml.StartElement:
			if se.Name.Local == ctype {
				var c codemap
				decoder.DecodeElement(&c, &se)
				codes[c.Code] = c.Name
			}
		}
	}
	err = writeMap(codes, ctype)
	if err != nil {
		log.Fatal(err)
	}
}

func generateContributors() {
	type aspacecodemap struct {
		Enumerations struct {
			LinkedAgentRelators map[string]string `yaml:"linked_agent_archival_record_relators"`
		}
	}
	var codes aspacecodemap
	data, err := ioutil.ReadFile(path.Join(datadir, "aspace_code_mappings.yml"))
	if err != nil {
		log.Fatal(err)
	}
	err = yaml.Unmarshal(data, &codes)
	if err != nil {
		log.Fatal(err)
	}
	err = writeMap(codes.Enumerations.LinkedAgentRelators, "contributor")
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	os.MkdirAll(confdir, os.ModePerm)
	generateCodes("languages.xml", "language")
	generateCodes("countries.xml", "country")
	generateContributors()
}
